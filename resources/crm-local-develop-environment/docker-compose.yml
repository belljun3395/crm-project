version: '3.8'

# 네트워크 정의 - 서비스 간 통신 최적화
networks:
  crm-network:
    driver: bridge

# 볼륨 정의 - 데이터 영속성 보장
volumes:
  mysql-data:
  kafka-data:
  zookeeper-data:

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  crm-mysql:
    container_name: crm-mysql8
    image: mysql/mysql-server:8.0.27
    networks:
      - crm-network
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ROOT_HOST=%
      - TZ=Asia/Seoul
    command: [ 
      "--character-set-server=utf8mb4", 
      "--collation-server=utf8mb4_unicode_ci", 
      "--lower_case_table_names=1", 
      "--max_connections=2048", 
      "--wait_timeout=3600" 
    ]
    ports:
      - "13306:3306"  # MySQL Database
    volumes:
      - ./mysql-init.d:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  crm-adminer:
    container_name: crm-adminer
    image: adminer:4
    networks:
      - crm-network
    ports:
      - "18080:8080"  # MySQL Web Admin
    environment:
      - ADMINER_DEFAULT_SERVER=crm-mysql8
      - ADMINER_DESIGN=nette
      - ADMINER_PLUGINS=tables-filter tinymce
    depends_on:
      crm-mysql:
        condition: service_healthy
    restart: unless-stopped

  # =============================================================================
  # Redis Cluster Services - 스케줄링 정확도와 성능을 위한 클러스터 구성
  # =============================================================================
  crm-redis-cluster:
    image: redis:7.2-alpine
    container_name: crm-redis-cluster
    networks:
      - crm-network
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7001" ]
    ports:
      - "18081:5540"  # Redis Insight Web UI 
      - "7001:7001"   # Redis Node 1
      - "7002:7002"   # Redis Node 2
      - "7003:7003"   # Redis Node 3
      - "7004:7004"   # Redis Node 4
      - "7005:7005"   # Redis Node 5
      - "7006:7006"   # Redis Node 6
    restart: unless-stopped

  crm-redis-node-1:
    image: redis:7.2-alpine
    container_name: crm-redis-node-1
    network_mode: "service:crm-redis-cluster"
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7002" ]
    restart: unless-stopped

  crm-redis-node-2:
    image: redis:7.2-alpine
    container_name: crm-redis-node-2
    network_mode: "service:crm-redis-cluster"
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7003" ]
    restart: unless-stopped

  crm-redis-node-3:
    image: redis:7.2-alpine
    container_name: crm-redis-node-3
    network_mode: "service:crm-redis-cluster"
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7004" ]
    restart: unless-stopped

  crm-redis-node-4:
    image: redis:7.2-alpine
    container_name: crm-redis-node-4
    network_mode: "service:crm-redis-cluster"
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7005" ]
    restart: unless-stopped

  crm-redis-node-5:
    image: redis:7.2-alpine
    container_name: crm-redis-node-5
    network_mode: "service:crm-redis-cluster"
    volumes:
      - ./cluster/redis.sh:/tmp/redis.sh
    command: [ "sh", "-c", "chmod +x /tmp/redis.sh && /tmp/redis.sh password 7006" ]
    restart: unless-stopped

  crm-redis-cluster-create:
    image: redis:7.2-alpine
    container_name: crm-redis-cluster-create
    network_mode: "service:crm-redis-cluster"
    depends_on:
      - crm-redis-cluster
      - crm-redis-node-1
      - crm-redis-node-2
      - crm-redis-node-3
      - crm-redis-node-4
      - crm-redis-node-5
    entrypoint: >
      sh -c "sleep 10 &&
      echo yes | redis-cli -a password --cluster create
      127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003
      127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006
      --cluster-replicas 1"
    restart: "no"

  crm-redis-insight:
    image: redislabs/redisinsight:2.58
    container_name: crm-redis-insight
    network_mode: "service:crm-redis-cluster"
    restart: unless-stopped

  # =============================================================================  
  # Kafka Services - Redis+Kafka 하이브리드 스케줄러 핵심 컴포넌트
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: crm-zookeeper
    networks:
      - crm-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
    ports:
      - "2181:2181"  # Zookeeper Client Port
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: crm-kafka
    networks:
      - crm-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"  # External Kafka Port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: crm-kafka-ui
    networks:
      - crm-network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"  # Kafka UI Web Interface
    environment:
      KAFKA_CLUSTERS_0_NAME: crm-local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
      AUTH_TYPE: "DISABLED"
    restart: unless-stopped

  # 스케줄링 시스템용 토픽 자동 생성
  kafka-topic-creator:
    image: confluentinc/cp-kafka:7.6.1
    container_name: crm-kafka-topic-creator
    networks:
      - crm-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: >
      sh -c "
      echo 'Creating Kafka topics for CRM Scheduler...'
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic scheduled-tasks-execution --partitions 3 --replication-factor 1 &&
      echo 'Topic scheduled-tasks-execution created successfully' &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic scheduler-dlq --partitions 1 --replication-factor 1 &&
      echo 'Topic scheduler-dlq (Dead Letter Queue) created successfully' &&
      echo 'All Kafka topics for scheduler created!'
      "
    restart: "no"

  # =============================================================================
  # AWS Services Mock - 기존 AWS 기반 스케줄러 호환성 유지
  # =============================================================================
  crm-localstack:
    container_name: crm-localstack
    image: localstack/localstack:3.8
    networks:
      - crm-network
    ports:
      - "4566:4566"      # LocalStack Main Port
      - "4510-4559:4510-4559"  # Additional Service Ports
    environment:
      - SERVICES=ses,sqs,events,scheduler
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - START_WEB=1
      - LEGACY_DIRECTORIES=1
      - AWS_DEFAULT_REGION=ap-northeast-2
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - "./localstack-init:/etc/localstack/init/ready.d"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
