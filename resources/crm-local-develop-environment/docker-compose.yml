version: '3.8'
services:
    crm-mysql:
        container_name: crm-mysql8
        image: mysql/mysql-server:8.0.27
        environment:
            - MYSQL_ROOT_PASSWORD=root
            - MYSQL_ROOT_HOST=%
            - TZ=Asia/Seoul
        command: [ "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--lower_case_table_names=1", "--max_connections=2048", "--wait_timeout=3600" ]
        ports:
            - "13306:3306"
        volumes:
            - ./mysql-init.d:/docker-entrypoint-initdb.d

    crm-adminer: # mysql web admin
        container_name: crm-adminer
        image: adminer:4
        ports:
            - "18080:8080"
        environment:
            - ADMINER_DEFAULT_SERVER=crm-mysql8
            - ADMINER_DESIGN=nette
            - ADMINER_PLUGINS=tables-filter tinymce

    crm-redis-cluster:
        image: redis:latest
        container_name: crm-redis-cluster
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7001" ]
        ports:
            - "18081:5540"
            - "7001:7001"
            - "7002:7002"
            - "7003:7003"
            - "7004:7004"
            - "7005:7005"
            - "7006:7006"

    crm-redis-node-1:
        image: redis:latest
        container_name: crm-redis-node-1
        network_mode: "service:crm-redis-cluster"
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7002" ]

    crm-redis-node-2:
        image: redis:latest
        container_name: crm-redis-node-2
        network_mode: "service:crm-redis-cluster"
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7003" ]

    crm-redis-node-3:
        image: redis:latest
        container_name: crm-redis-node-3
        network_mode: "service:crm-redis-cluster"
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7004" ]

    crm-redis-node-4:
        image: redis:latest
        container_name: crm-redis-node-4
        network_mode: "service:crm-redis-cluster"
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7005" ]

    crm-redis-node-5:
        image: redis:latest
        container_name: crm-redis-node-5
        network_mode: "service:crm-redis-cluster"
        volumes:
            - ./cluster/redis.sh:/tmp/redis.sh
        command: [ "sh","-c","chmod +x /tmp/redis.sh && /tmp/redis.sh password 7006" ]

    crm-redis-cluster-create:
        image: redis:latest
        network_mode: "service:crm-redis-cluster"
        depends_on:
            - crm-redis-cluster
            - crm-redis-node-1
            - crm-redis-node-2
            - crm-redis-node-3
            - crm-redis-node-4
            - crm-redis-node-5
        entrypoint: >
            sh -c "sleep 5 &&
            echo yes | redis-cli -a password --cluster create
            127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003
            127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006
            --cluster-replicas 1"

    crm-redis-insight:
        image: redislabs/redisinsight:latest
        container_name: crm-redis-insight
        network_mode: "service:crm-redis-cluster"

    crm-localstack:
        container_name: crm-localstack
        image: localstack/localstack:3.8
        ports:
            - "4566:4566"
            - "4510-4559:4510-4559"
        environment:
            - SERVICES=ses,sqs,events,scheduler
            - DEBUG=1
            - DOCKER_HOST=unix:///var/run/docker.sock
            - START_WEB=1
            - LEGACY_DIRECTORIES=1
            - AWS_DEFAULT_REGION=ap-northeast-2
            - AWS_ACCESS_KEY_ID=test
            - AWS_SECRET_ACCESS_KEY=test
        volumes:
            - "./localstack-init:/etc/localstack/init/ready.d"
            - "/var/run/docker.sock:/var/run/docker.sock"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s
